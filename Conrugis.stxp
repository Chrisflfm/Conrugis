#include "Variables.stxp"
#include "Cas.stxp"

Task tMain Autorun
//Init system
	
	 TimeoutRegAccess:= 100;
//Init flags en fouten
	FlagClear(0,120); //Clear eerste 121 flags
//Init outputs en flags
	forceLow15 := False;
	forceLow16 := False;
	hrM6pmpPG :=  False;
	hrY1PG :=  False;
	hrY2PG :=  False;
	hrVent1A := False;
	hrVent1B := False;
	hrVent2A := False;		
	hrVent2B := False;		
	hrPomp1 := False;		
	hrPomp2 := False;	
	hrDakvent1 := False;
	hrDakvent2 := False;
	laBlauw1 := False;
	laBlauw2 := False;
	laRood := False;
	laGroen := False;
	hrPulsPoort := False;
	hrBuzz :=  False;
	StatusTimpuls :=0;
	flAck := False;
	flpAllesUit := False;
	flpBuitenLamp := False;
	flpLichtGarage := False;
	flpLichtLoods := False;
	flpVentGarage := False;
	flpVentLoods := False;
	hrpBuitenLamp := False;
	hrpLichtGarage := False;
	hrpLichtLoods := False;
	hrpVentGarage := False;
	hrpVentLoods := False;
	blForceBuzz := False;
	blBuzzT1 :=False;
	blBuzzT2 :=False;
	blBuzzT3 :=False;
	blBuzzT4 :=False;
	swKlepGarage := 2;
	swKlepLoods := 2;
	hrKlepGarage := False;
	hrKlepLoods := False;	
	blTest := False;
	rotDakVentGarage := 0;
	rotDakVentloods := 0;
	blTmerMinTempAanVBdrf1 := False;
	blTmerMinTempAanVBdrf2 := False;
	//TijdFactor := 60000;
	blDelayGarage:=False;
	blDelayLoods:=False;
	PLCAlive := 1;
	PoortOpdrachtOB := 0;
//Start temp meting Retour
	ComTmpRet1 := 104; //4 draads
	ComTmpRet1 := 107; //Celsius
	ComTmpRet1 := 109; //PT100
	ComTmpRet1 := 160; //Display temperature in module register
	ComTmpRet2 := 104; //4 draads
	ComTmpRet2 := 107; //Celsius
	ComTmpRet2 := 109; //PT100
	ComTmpRet2 := 160; //Display temperature in module register

//Start temp meting Ruimte temp
	ComTmpRth1 := 104; //4 draads
	ComTmpRth1 := 107; //Celsius
	ComTmpRth1 := 109; //PT100
	ComTmpRth1 := 160; //Display temperature in module register
	ComTmpRth2 := 104; //4 draads
	ComTmpRth2 := 107; //Celsius
	ComTmpRth2 := 109; //PT100
	ComTmpRth2 := 160; //Display temperature in module register

//Start temp meting Ruimte temp dak
	ComTmpRth1dak := 104; //4 draads
	ComTmpRth1dak := 107; //Celsius
	ComTmpRth1dak := 109; //PT100
	ComTmpRth1dak := 160; //Display temperature in module register
	ComTmpRth2dak := 104; //4 draads
	ComTmpRth2dak := 107; //Celsius
	ComTmpRth2dak := 109; //PT100
	ComTmpRth2dak := 160; //Display temperature in module register

//Start temp meting Aanvoer
	ComTmpAanv1 := 104; //4 draads
	ComTmpAanv1 := 107; //Celsius
	ComTmpAanv1 := 109; //PT100
	ComTmpAanv1 := 160; //Display temperature in module register
	ComTmpAanv2 := 104; //4 draads
	ComTmpAanv2 := 107; //Celsius
	ComTmpAanv2 := 109; //PT100
	ComTmpAanv2 := 160; //Display temperature in module register

//Set uitmideling temperatuur meting	
	AvgTmpRet1 := 16; //uitmiddelen  laatste 16
	AvgTmpRet2 :=16; //uitmiddelen  laatste 16
	AvgTmpRth1 := 16; //uitmiddelen  laatste 16
	AvgTmpRth2 := 16; //uitmiddelen  laatste 16
	AvgTmpRth1dak := 16; //uitmiddelen  laatste 16
	AvgTmpRth2dak := 16; //uitmiddelen  laatste 16

//Config AI
	ConfgSetpoint1 := 5; //0-10V
	AvgSetpoint1 := 16; //uitmiddelen  laatste 16
	ConfgSetpoint1 := 5; //0-10V
	AvgSetpoint1 := 16; //uitmiddelen  laatste 16
	ConfWaterdruk := 5; //0-10V
	AvgWaterDruk := 16; //uitmiddelen  laatste 16
	ConfDieselStal := 5; //0-10V
	AvgDieselStal := 16; //uitmiddelen  laatste 16
	


//**************************************Start Main loop**************************************
	bInAuto := True;
	BootCounter := BootCounter +1;
	While bInAuto Do
		//vorst veilig reset voor beslssingsboom
		blGarageLuisterdNaarTyd := False;
		blGarageLuisterdNaarCt := False;
		blGarageLuisterdNaartmp := False;
		blLoodsLuisterdNaarTyd := False;
		blLoodsLuisterdNaarCt := False;
		blLoodsLuisterdNaartmp := False;
		blMinTempAanVBedrijf1 := False;
		blMinTempAanVBedrijf2 := False;	
		
		//garage snachts als er niemand is in vorstveilig		
		if (not ctLichtGarage) and (hours > TijdVorstVeiligAan or Hours < TijdVorstVeiligUit) then
			blGarageLuisterdNaarTyd := True;
			VorstVeiligregimeGarage := 0;	
		End_If
		//als niet in nacht vorstveilig maar temp water te laag dan op basis van temp water te laag in VV
		if blMinTempAanVBedrijf1 and not blGarageLuisterdNaarTyd then
			blGarageLuisterdNaartmp := true;
			VorstVeiligregimeGarage := 1;	
		End_If
		//als niet snachts en niet water te kooud op basis van schakelaar in VV
		if not blGarageLuisterdNaarTyd and not blGarageLuisterdNaartmp then
			blGarageLuisterdNaarCt := True;
			VorstVeiligregimeGarage := 2;
		End_If	
		//set flag als op basis van tijd of temp in VV 	
		if  blGarageLuisterdNaarTyd or blGarageLuisterdNaartmp then
			flInVorstVeilig1 := True;
		End_if		
		
		//ctVorstveilig forceerd altijd vorstveilig
		if ctVorstVeilig1 then
			flInVorstVeilig1 := True;
			VorstVeiligregimeGarage := 2;
			blMinTempAanVBedrijf1 := False;
		End_If
		//niet in vorstveilig als er geen reden voor is
		if not blGarageLuisterdNaarTyd and not blGarageLuisterdNaartmp and not ctVorstVeilig1 then
			flInVorstVeilig1 := False;
		End_if	
		
		//Vorsteveilig sturing Loods
		//loods snachts als er niemand is in vorstveilig
		if not ctLichtLoods  and (hours > TijdVorstVeiligAan or Hours < TijdVorstVeiligUit) then
			blLoodsLuisterdNaarTyd := True;
			VorstVeiligregimeLoods := 0;	
		End_If
		
		//als niet in nacht vorstveilig maar temp water te laag dan op basis van temp water te laag in VV
		if blMinTempAanVBedrijf2 and not blLoodsLuisterdNaarTyd then
			blLoodsLuisterdNaartmp := true;
			VorstVeiligregimeLoods := 1;	
		End_If
		//als niet snachts en niet water te kooud op basis van schakelaar in VV
		if not blLoodsLuisterdNaarTyd and not blLoodsLuisterdNaartmp then
			blLoodsLuisterdNaarCt := True;
			VorstVeiligregimeLoods := 2;
		End_If	
		//set flag als op basis van tijd of temp in VV 		
		if  blLoodsLuisterdNaarTyd or blLoodsLuisterdNaartmp then
			flInVorstVeilig2 := True;
		End_if		
		//ctVorstveilig forceerd altijd vorstveilig
		if ctVorstVeilig2 then
			flInVorstVeilig2 := True;
			VorstVeiligregimeLoods := 2;
			blMinTempAanVBedrijf1 := False;
		End_If
		//niet in vorstveilig als er geen reden voor is
		if not blLoodsLuisterdNaarTyd and not blLoodsLuisterdNaartmp and not ctVorstVeilig2 then
			flInVorstVeilig2 := False;
		End_if	
		
		
		if not flWeekTestBezig then
			//sturing verwarming garage
			if not flInVorstVeilig1 then
				flActInVorstVeilig1 := False;
				//Setpoint uitrekenen
				WensTemp1 := -5 + (mVSetpoint1*10/32767); // --> naar volt
				SetpointBedrijf1 := BaseSetpointBedrijf + WensTemp1;
			
				//Garage
				If tmpRth1 < SetpointBedrijf1 - (HysteresischBedrijf/2) then
					flPomp1 := True;
				End_If;
				If tmpRth1 >= SetpointBedrijf1 + (HysteresischBedrijf/2) then
					flPomp1 := False;
				End_If;
				if (tmpRet1 >= MinTempAanvoer1 + (HysteresischAanv/2)  and not hrKlepGarage) or flForceVent1 then
					flVent1A := True;
					flVent1B := True;
				End_If;
				if (tmpRet1 < MinTempAanvoer1 - (HysteresischAanv/2)  or  hrKlepGarage) and not flForceVent1  then
					flVent1A := False;
					flVent1B := False;
				End_If;
				flBlauw1 := False;
		
			Else
				flActInVorstVeilig1 := True;
				SetpointBedrijf1 := SetpointVorstVeilig;
				//Garage
				If tmpRth1 < SetpointVorstVeilig - (HysteresischVorstV/2) then
					flPomp1 := True;
				End_If;
				If tmpRth1 >= SetpointVorstVeilig + (HysteresischVorstV/2) then
					flPomp1 := False;
				End_If;
				if flPomp1 or flForceVent1 then
					flVent1A := True;
				Else
					flVent1A := False;
				End_If;
				if flVent1A and tmpRet1 < SetpointVorstVeilig - dTVentBijschakelen or flForceVent1 then
					flVent1B := True;
				End_If
				if tmpRet1 >= SetpointVorstVeilig and not flForceVent1 then
					flVent1B := False;
				End_If;
				flBlauw1 := True;
			
			End_If;

	//sturing verwarming loods
		
			if not flInVorstVeilig2  then
				flActInVorstVeilig2 := False;
				//Setpoint uitrekenen
				WensTemp2 := 5 + (mVSetpoint2*-10/32767); // --> naar Volt
				SetpointBedrijf2 := BaseSetpointBedrijf + WensTemp2;
				//Loods
				If tmpRth2 < SetpointBedrijf2 - (HysteresischBedrijf/2) then
					flPomp2 := True;
				End_If;
				If tmpRth2 >= SetpointBedrijf2 + (HysteresischBedrijf/2) then
					flPomp2 := False;
				End_If;
				if (tmpRet2 >= MinTempAanvoer2 + (HysteresischAanv/2) and not hrKlepLoods) or flForceVent2 then
					flVent2A := True;
					flVent2B := True;
				End_If;
				if (tmpRet2 < MinTempAanvoer2 - (HysteresischAanv/2) or hrKlepLoods) and not flForceVent2 then
					flVent2A := False;
					flVent2B := False;
				End_If;
				flBlauw2 := False;	
			Else
				flActInVorstVeilig2 := True;
				SetpointBedrijf2 :=SetpointVorstVeilig;
				//Loods
				If tmpRth2 < SetpointVorstVeilig - (HysteresischVorstV/2) or flForceVent2 then
					flPomp2 := True;
				End_If;
				If tmpRth2 >= SetpointVorstVeilig + (HysteresischVorstV/2) and not flForceVent2 then
					flPomp2 := False;
				End_If;
				if flPomp2 or flForceVent2 then
					flVent2A := True;
				Else
					flVent2A := False;
				End_If;
				if flVent2A and tmpRet2 < SetpointVorstVeilig - dTVentBijschakelen or flForceVent2 then
					flVent2B := True;
				End_If
				if tmpRet2 >= SetpointVorstVeilig and not flForceVent2 then
					flVent2B := False;
				End_If;
				flBlauw2 := True;
			End_If;
		End_If;
		
//dakvent Garage
		if ((tmpRth1dak > setpointDakVent + (HysteresischDak/2)) and ctVorstVeilig1 == False) or flForceDakVent1 then
			flDakvent1 := True;
		End_if;
		if ((tmpRth1dak <= setpointDakVent - (HysteresischDak/2)) or ctVorstVeilig1 == True) and not flForceDakVent1 then
			flDakvent1 := False;
		End_if;
		
		if flActInVorstVeilig1 and tmpRth1dak >= SetpointVorstVeilig + 3 and tmpRth1 <= SetpointVorstVeilig + 2 then
			flDakvent1Vorst := True;
		End_if;
		if not flActInVorstVeilig1 or tmpRth1dak < SetpointVorstVeilig or tmpRth1 > SetpointVorstVeilig + 2  then
			flDakvent1Vorst := False;
		End_if;
		
//Dakvent loods
		if ((tmpRth2dak > (setpointDakVent + (HysteresischDak/2))) and ctVorstVeilig2 == False) or flForceDakVent2 then
			flDakvent2 := True;
		End_if;
		if ((tmpRth2dak <= (setpointDakVent - (HysteresischDak/2))) or ctVorstVeilig2 == True) and not flForceDakVent2 then
			flDakvent2 := False;
		End_if;
		
		if flActInVorstVeilig2 and tmpRth1dak >= SetpointVorstVeilig + 3 and tmpRth2 <= SetpointVorstVeilig + 2 then
			flDakvent2Vorst := True;
		End_if;
		if not flActInVorstVeilig2 or tmpRth1dak < SetpointVorstVeilig or tmpRth2 > SetpointVorstVeilig + 2  then
			flDakvent2Vorst := False;
		End_if;
		
// set clock
		if flSetClock then
			Hours := regHours;
			Minutes := regMinutes;
			Seconds := regSeconds;
			flSetClock := False;
		End_if;

// Flow bevestigd	
		if hrPomp1 and not Ft01_Flow1 then
			blPomp1Ok := True;
		else
			blPomp1Ok := False;
		End_If;

		if hrPomp2 and not Ft02_Flow2 then
			blPomp2Ok := True;
		else
			blPomp2Ok := False;
		End_If;

//Opstoken
		if Ft05_Opstoken then
			flOpstoken := true;
		else
			flOpstoken := false;
		End_If;

// Alm visualisatie en sonorisatie
		if Ft01_Flow1 or Ft02_Flow2 or Ft03_H2Odruk or Ft04_Vorstgevaar  or Ft08_Waterdruklaag or Ft09_Waterdrukkritiek or Ft10_MoederbordTemp then
			flRood := True;
		else
			flRood := False;
		End_if;
		
		if Ft01_Flow1 or Ft02_Flow2 or Ft03_H2Odruk or Ft04_Vorstgevaar or (Ft05_Opstoken and KnipperBit) or Ft08_Waterdruklaag or Ft09_Waterdrukkritiek or Ft10_MoederbordTemp then
			flGroen := False;
		else
			flGroen := True;
		End_if;
		
		if blForceBuzz or ((Ft01_Flow1 or Ft02_Flow2 or Ft03_H2Odruk or Ft04_Vorstgevaar or Ft08_Waterdruklaag or Ft09_Waterdrukkritiek or Ft10_MoederbordTemp) and not flMute  and not flAck) then
			blBuzzT1 := True;
		Else
			blBuzzT1 := False;
		End_If;
		
		if flAck then //reset weektet foutmelding voor reset flAck
			Ft06_WeekTestGarFaalt := False;
			Ft07_WeekTestLoodsFaalt := False;
		End_If
		
		if not Ft01_Flow1 and not Ft02_Flow2 and not Ft03_H2Odruk and not Ft04_Vorstgevaar and not Ft06_WeekTestGarFaalt and not Ft07_WeekTestLoodsFaalt and not Ft08_Waterdruklaag and not Ft09_Waterdrukkritiek and not Ft10_MoederbordTemp then
			flAck := False;
		End_If
		
		if not Ft01_Flow1 and not Ft02_Flow2 and not Ft03_H2Odruk and not Ft04_Vorstgevaar and not Ft05_Opstoken then
			StatusErr :=0;
		End_If
		
		if Ft01_Flow1 then
			StatusErr :=1;
		End_If

		if Ft02_Flow2 then
			StatusErr :=2;
		End_If		
		
		if Ft03_H2Odruk then
			StatusErr :=3;
		End_If
		
		if Ft04_Vorstgevaar then
			StatusErr :=4;
		End_If
		
		if Ft05_Opstoken then
			StatusErr :=5;
		End_If
		
		if Ft06_WeekTestGarFaalt then
			StatusErr :=6;
		End_If
		
		if Ft07_WeekTestLoodsFaalt then
			StatusErr :=7;
		End_If
		
		if Ft08_Waterdruklaag then
			StatusErr :=8;
		End_If
		
		if Ft09_Waterdrukkritiek then
			StatusErr :=9;
		End_If
		
		if Ft10_MoederbordTemp then
			StatusErr :=10;
		End_If

//Dakventilatoren
		if StatusVentDak1 == 1 then
			flForceDakVent1Off := False;
			flForceDakVent1 := False;
		End_if;			
		if StatusVentDak1 == 2 then
			flForceDakVent1Off := True;
			flForceDakVent1 := False;
		End_if;			
		if StatusVentDak1 == 3 then
			flForceDakVent1Off := False;
			flForceDakVent1 := True;
		End_if;			
		
		if StatusVentDak2 == 1 then
			flForceDakVent2Off := False;
			flForceDakVent2 := False;
		End_if;			
		if StatusVentDak2 == 2 then
			flForceDakVent2Off := True;
			flForceDakVent2 := False;
		End_if;			
		if StatusVentDak2 == 3 then
			flForceDakVent2Off := False;
			flForceDakVent2 := True;
		End_if;		
		
//ruimte ventilatoren
		if StatusVent1A == 2 then
			flForceVent1Off := True;
			flForceVent1 := False;
		End_if;			
		if StatusVent1A == 1 then
			flForceVent1Off := False;
			flForceVent1 := False;
		End_if;			
		if StatusVent1A == 3 then
			flForceVent1Off := False;
			flForceVent1 := True;
		End_if;		
		
		if StatusVent2A == 2 then
			flForceVent2Off := True;
			flForceVent2 := False;
		End_if;			
		if StatusVent2A == 1 then
			flForceVent2Off := False;
			flForceVent2 := False;
		End_if;			
		if StatusVent2A == 3 then
			flForceVent2Off := False;
			flForceVent2 := True;
		End_if;		
	
	End_While;
End_Task


Task tPoorthuis Autorun
//*************************************tPoorthuis****************************************
	While True Do
		// warmte vraag = klep open
		if rthRuimtePG then 
			flHrY1 := True;
		else
			flHrY1 := False;
		End_If
		// als klep open start pomp
		if ctY1PG then 
			flM6pmpPG := True;
		else
			flM6pmpPG := False;
		End_If
		
		if (PoortOpdrachtIB == 1 or flPoortViaDsp) and PoortOpdrachtOB ==0 then //niet bezig --> strt puls
			PoortOpdrachtOB := 1; //puls gestart
			flhrPulsPoort := True; //puls hoog
			delay(T#500ms); //wacht
			flhrPulsPoort := False; //puls laag
			PoortOpdrachtOB := 0; //puls klaar
			flPoortViaDsp := False;
		End_If
		
		if PoortOpdrachtIB == 0 then
			PoortOpdrachtOB := 0;
		End_If

	End_While;
End_Task

Task tVeiligheden Autorun
//*************************************tVeiligheden en outputs****************************************
	While True Do
//Knipperbit
	if Seconds mod 2 == 0 then
		KnipperBit := True;
	else
		KnipperBit := False;
	End_if;
	
	if Seconds mod 2 == 0 and Seconds mod 3 == 0 then
		blBuzzKnipper := True;
	else
		blBuzzKnipper := False;
	End_if;
	
	
// DO sturen op 1 locatie
		if flhrPulsPoort then
			hrPulsPoort := True;
		else 
			hrPulsPoort := False;
		End_If
		
		if flHrY1 then
			hrY1PG := True;
		Else
			hrY1PG := False;
		End_If
		
		if flM6pmpPG then
			hrM6pmpPG := True;
		else
			hrM6pmpPG := False;
		end_if
		
		if flBlauw1 then
			laBlauw1 := True;
		else
			laBlauw1 := False;
		end_if;
		
		if flBlauw2 then
			laBlauw2 := True;
		else
			laBlauw2 := False;
		end_if;
		
		if flGroen then
			laGroen := True;
		else
			laGroen := False;
		end_if;
		
		if flRood then
			laRood := True;
		else
			laRood := False;
		end_if;
		
		if (flDakvent1 or flDakvent1Vorst) And not flForceDakVent1Off then
			hrDakvent1 := True;
		else
			hrDakvent1 := False;
		end_if;
		
		if (flDakvent2 or flDakvent2Vorst) And not flForceDakVent2Off then
			hrDakvent2 := True;
		else
			hrDakvent2 := False;
		end_if;
		
		if flVent1A and not flForceVent1Off then
			hrVent1A := True;
		else
			hrVent1A := False;
		end_if;
		
		if flVent1B  and not flForceVent1Off then
			hrVent1B := True;
		else
			hrVent1B := False;
		end_if;
		
		if flVent2A and not flForceVent2Off then
			hrVent2A := True;
		else
			hrVent2A := False;
		end_if;
		
		if flVent2B and  not flForceVent2Off then
			hrVent2B := True;
		else
			hrVent2B := False;
		end_if;
		
		if ctKlepGarage then
			hrPomp1 := True;
		End_If
		
		if hrKlepGarage then
			hrPomp1 := False;
		End_If
		
		if ctKlepLoods then
			hrPomp2 := True;
		End_If
		
		if hrKlepLoods then
			hrPomp2 := False;
		End_If
		
		if (flPomp1 or Ft04_Vorstgevaar or swKlepGarage == 3 or blForceWeekTest) and not (swKlepGarage == 1) and not Ft09_Waterdrukkritiek then
			hrKlepGarage := False;
		else
			hrKlepGarage := True;
		end_if;
		
		if (flPomp2 or Ft04_Vorstgevaar or swKlepLoods == 3 or blForceWeekTest) and not (swKlepLoods == 1) and not Ft09_Waterdrukkritiek then
			hrKlepLoods := False;
		else
			hrKlepLoods := True;
		end_if;
		
		if flpTestBuzz or (blBuzzT1 and blBuzzKnipper) or blBuzzT2 or blBuzzT3 or blBuzzT4 then
			hrBuzz := True;
		End_If
		if not flpTestBuzz and (not blBuzzKnipper or not blBuzzT1) and not blBuzzT2 and not blBuzzT3 and not blBuzzT4 then
			hrBuzz := False;
		end_if;
		
		
	End_While	
End_Task

Task tPulsRelais Autorun
//*************************************PulsRelais****************************************
	While True Do
			
		//puls vent loods
		if flpVentLoods then
			StatusTimpuls := 1;
			hrpVentLoods := true;
			Delay(T#500ms);
			flpVentLoods := False;	
			hrpVentLoods := False;
			StatusTimpuls := 0;
		End_if
		//puls vent garage
		if flpVentGarage then
			StatusTimpuls := 2;
			hrpVentGarage := true;
			Delay(T#500ms);
			flpVentGarage := False;	
			hrpVentGarage := False;
			StatusTimpuls := 0;
		End_if
	
		//puls buitenlamp
		
		if ManueelBuitenlmp == 1 then
			flpManueelBuitenlmp := True;
		Else
			flpManueelBuitenlmp := False;
		End_If
		
		
		if (flLampGarDspConrugis or flpManueelBuitenlmp) and not flbuitenlampWait then
			flbuitenlampWait := True;
			flbuitenlampRemote := True;
			flpBuitenLamp := True;
		End_If
		
		if SchemerschakSonoLux == 0 then //0 = licht, 1 = donker
			flSchemerSchSonLx := False; //het is licht buiten
		Else
			flSchemerSchSonLx := True; // het is donker buiten
		End_If	
		
		// als lamp aan en het is licht of het is na 20:00 uur doe ze dan uit
		if (not flbuitenlampRemote) and (((ctBuitenLamp and not flSchemerSchSonLx) or (ctBuitenLamp and Hours > 20))) then
			flpBuitenLamp := true;
		End_If
			
		// puls geven
		if flpBuitenLamp then
			StatusTimpuls := 3;
			hrpBuitenLamp := true;
			Delay(T#500ms);
			hrpBuitenLamp := False;
			StatusTimpuls := 0;
			flpBuitenLamp  := False;
			flLampGarDspConrugis := False;
			if not ctBuitenLamp then
				flbuitenlampRemote := False;
			End_If
		End_if
		
		if (not flLampGarDspConrugis and not flpManueelBuitenlmp) and flbuitenlampWait then
			flbuitenlampWait := False;
		End_If
		
		if not ctBuitenLamp and flbuitenlampRemote then
			flbuitenlampRemote := False;
		End_If
		
		//flLampGarDspConrugis := flpManueelBuitenlmp;
		
		//puls licht garage
		if flpLichtGarage then
			StatusTimpuls := 4;
			hrpLichtGarage := true;
			Delay(T#500ms);
			flpLichtGarage := False;	
			hrpLichtGarage := False;
			StatusTimpuls := 0;
		End_if
		//puls licht loods
		if flpLichtLoods then
			StatusTimpuls := 5;
			hrpLichtLoods := true;
			Delay(T#500ms);
			flpLichtLoods := False;
			hrpLichtLoods := False;
			StatusTimpuls := 0;	
		End_if
		
		//puls alles uit
		if flpAllesUit then
			StatusTimpuls := 6;
			blForceBuzz := true;
			Delay(T#250ms);
			blForceBuzz := False;
			Delay(T#250ms);
			blForceBuzz := true;
			Delay(T#250ms);
			blForceBuzz := False;
			if ctLichtGarage then
				hrpLichtGarage := True;
			End_If
			if ctLichtLoods then
				hrpLichtLoods := True;
			End_If
			if ctBuitenLamp then
				hrpBuitenLamp := True;
			End_If
			if ctVentGarage then
				hrpVentGarage := True;
			End_If
			if ctVentLoods then
				hrpVentLoods := True;
			End_If
			Delay(T#250ms);
			hrpLichtGarage := False;
			hrpLichtLoods := False;
			hrpBuitenLamp := False;
			hrpVentGarage := False;
			hrpVentLoods := False;
			flpAllesUit := False;
			StatusTimpuls := 0;			
		End_if
		//alle dk in? ==> start tijd
		if dkLichtBuiten or dkLichtGarage or dkLichtLoods then
			StatusTimpuls := 7;
			Delay(T#1500ms);
		End_If
		//na 1.5sec nog steeds in? ==> beep beep ==> alles uit
		if (dkLichtBuiten or dkLichtGarage or dkLichtLoods) and StatusTimpuls == 7 then
			StatusTimpuls := 8;
			blBuzzT3 := true;
			Delay(T#210ms);
			blBuzzT3 := False;
			flpAllesUit := True;
			StatusTimpuls := 0;
		else
			StatusTimpuls := 0;
		End_if
	
			// na 1 sec elke sec langer dk in is 15 min extractor tijd garage
		if dkVentGarage and ctVentGarage then
			Delay(T#1s);
			telExtractorGarage := 1;
			blBuzzT2 := true;
			Delay(T#250ms);
			blBuzzT2 := False;
			Delay(T#1s);
			//Label ExtGarage = 200:
			while dkVentGarage and ctVentGarage do
				telExtractorGarage := telExtractorGarage + 1;
				blDelayGarage := True;
				blBuzzT2 := true;
				Delay(T#250ms);
				blBuzzT2 := False;
				Delay(T#1s);
				blDelayGarage := False;
			End_While			
		End_If
		
		//instelbaar maken tijdsffactor
		//6000 = 10 sec 
		//User Time base --> 1 min = 60000
		TijdFactor := TijdfactorMin * 60000;
		TimerValueGarageLoods :=  TijdFactor*telExtractorGarage;
		
		//start x min timer
		if not blTimerExtrGarLoopt and telExtractorGarage > 0 then
			TimerStart(stExtractorGarage, TijdFactor);
			intFordce0Gar :=1;
			blTimerExtrGarLoopt := True;
		End_If
		
		TussenWaarde1Gar := (TimerValueActual(stExtractorGarage));
		TussenWaarde2Gar := TussenWaarde1Gar/60000;
		TotVentDraaiTijdGarage := TussenWaarde2Gar * telExtractorGarage; 
		
		//timer end 15 min bij laatste itteratie stop extractor
		if TimerEnd(stExtractorGarage) and blTimerExtrGarLoopt then
			telExtractorGarage := telExtractorGarage - 1;
			blTimerExtrGarLoopt := False;
			if (telExtractorGarage < 1) and ctVentGarage then
				flpVentGarage := True;
			End_If
		End_If
		
		// extractor uit = 15 min teller op 0
		if not ctVentGarage then
			telExtractorGarage := 0;
			TussenWaarde2Gar :=0;
			intFordce0Gar := 0;	
			TimerStart(stExtractorGarage, 0);		
		End_If
		
		// na 1 sec elke sec langer dk in is x min extractor tijd loods
		if dkVentLoods and ctVentLoods then
			Delay(T#1s);
			telExtractorLoods := 1;
			blBuzzT2 := true;
			Delay(T#250ms);
			blBuzzT2 := False;
			Delay(T#1s);
			Label ExtLoods = 201:
			while dkVentLoods and ctVentLoods do
				telExtractorLoods := telExtractorLoods + 1;
				blBuzzT2 := true;
				Delay(T#250ms);
				blBuzzT2 := False;
				Delay(T#1s);
			End_While
			if dkVentLoods and ctVentLoods then
				goto ExtLoods
			End_If
		End_If
		//instelbaar maken tijdsffactor
		//6000 = 10 sec 
		//User Time base --> 1 min = 60000
		TijdFactor := TijdfactorMin * 60000;
		TimerValueGarageStal :=  TijdFactor*telExtractorLoods;
		
		// extractor uit = 15 min teller op 0
		if not ctVentLoods then
			telExtractorLoods := 0;
			TussenWaarde2Loods :=0;
			intFordce0Loods :=0;
			TimerStart(stExtractorLoods, 0);
		End_If
	
		//start 15 min timer
		if not blTimerExtrLoodsLoopt and telExtractorLoods > 0 then
			intFordce0Loods :=1;
			blTimerExtrLoodsLoopt := True;
			TimerStart(stExtractorLoods, TijdFactor);
		End_If
				
		
		TussenWaarde1Loods := (TimerValueActual(stExtractorLoods));
		TussenWaarde2Loods := TussenWaarde1Loods/60000;
		TotVentDraaiTijdLoods := TussenWaarde2Loods * telExtractorLoods;
		
		//timer end 15 min bij laatste itteratie stop extractor
		if TimerEnd(stExtractorLoods) and blTimerExtrLoodsLoopt then
			telExtractorLoods := telExtractorLoods - 1;
			blTimerExtrLoodsLoopt := False;
			if (telExtractorLoods < 1) and ctVentLoods then
				flpVentLoods := True;
			End_If
		End_If
		
	End_While	
End_Task

Task WeekTest Autorun
	blWeekTestUitgevoerd := False;
	flWeekTestBezig := False;
	blForceWeekTest := False;
	flStartWeekTest := False;
	flWeekTestGarageResult:= True;
	flWeekTestLoodsResult:= True;
	While True Do
		
		if (Weekday == 0 and Hours > 1 and Hours < 2 and not blWeekTestUitgevoerd) or (flStartWeekTest and not flWeekTestBezig) then
			blWeekTestUitgevoerd := True;
			flWeekTestBezig := True;
			blForceWeekTest := True;
			flStartWeekTest := False;
			Ft06_WeekTestGarFaalt := False;
			Ft07_WeekTestLoodsFaalt := False;
			TimerStart(stWeekTest, T#5m)		
		End_If
		
		if TimerEnd(stWeekTEst) and flWeekTestBezig then
			if not ctFlow1 then
				Ft06_WeekTestGarFaalt := True;
				flWeekTestGarageResult:= False;
			else
				Ft06_WeekTestGarFaalt := False;
				flWeekTestGarageResult:= True;
			End_If
			if not ctFlow2 then
				Ft07_WeekTestLoodsFaalt := True;
				flWeekTestLoodsResult:= False;
			Else
				Ft07_WeekTestLoodsFaalt := False;
				flWeekTestLoodsResult:= True;
			End_If
			flWeekTestBezig := False;
			blForceWeekTest := False;
		End_If			
		
		if Weekday == 0 and Hours == 1 and blWeekTestUitgevoerd then
			blWeekTestUitgevoerd := False;
			Ft06_WeekTestGarFaalt := False;
			Ft07_WeekTestLoodsFaalt := False;
		End_If	
	End_While	
End_Task

Task tError Autorun
//*************************************tError****************************************
	While True Do
	//Dieseltank stalplaats
	InhoudDieselStal := mVDieselStal * FactDieselStal + OffsetDieselStal;
	RuweTankinhoudStal := mVDieselStal; // voor Munereica comunicatie
	TankinhoudStal := InhoudDieselStal; // voor Munereica comunicatie
	
	if hrPomp1 and not blTimeOutPmp1Act then
		TimerStart(stTimeOutPomp1,T#240s);
		blTimeOutPmp1Act := True;
	End_If;
	if TimerEnd(stTimeOutPomp1) and not ctFlow1 and hrPomp1 then
		Ft01_Flow1 := True;
	End_If;
	if  ctFlow1 and hrPomp1 then
		Ft01_Flow1 := False;
	End_If;
	if not hrPomp1 then
		blTimeOutPmp1Act := False;
	End_If;
	
	if hrPomp2 and not blTimeOutPmp2Act then
		TimerStart(stTimeOutPomp2,T#240s);
		blTimeOutPmp2Act := True;
	End_If;
	if TimerEnd(stTimeOutPomp2) and not ctFlow2 and hrPomp2 then
		Ft02_Flow2 := True;
	End_If;
	if ctFlow2 then
		Ft02_Flow2 := False;
	End_If;
	if not hrPomp2 then
		blTimeOutPmp2Act := False;
	End_If;
	
	//Time out flow poortgebouw
	if hrM6pmpPG and not blTimeOuthrM6pmpPG then
		TimerStart(stTimeOuthrM6pmpPG,T#240s);
		blTimeOuthrM6pmpPG := True;
	End_If;
	if TimerEnd(stTimeOuthrM6pmpPG) and not ctFlowY1PG and hrM6pmpPG then
		Ft_FlowPoortgebouw := True;
	End_If;
	if TimerEnd(stTimeOuthrM6pmpPG)  then
		blTimeOuthrM6pmpPG := False;
	End_If;
	if  ctFlowY1PG and hrM6pmpPG then
		Ft_FlowPoortgebouw := False;
	End_If;
	if not hrM6pmpPG then
		Ft_FlowPoortgebouw := False;
	End_If;	
	
	if hrY1PG and not flTimeOutKlepPoortGeb then
		TimerStart(stTimeOutKlepPoortGeb,T#240s);
		flTimeOutKlepPoortGeb := True;
	End_If;
	if TimerEnd(stTimeOutKlepPoortGeb) and not ctY1PG and hrY1PG then
		Ft_FlowPoortgebouw := True;
	End_If;
	if  ctY1PG and hrY1PG then
		Ft_FlowPoortgebouw := False;
	End_If;
	if not hrY1PG then
		flTimeOutKlepPoortGeb := False;
	End_If;
	
	if ctPressH2O then
		Ft03_H2Odruk := True;
	Else
		Ft03_H2Odruk := False;
	End_If;
	
	if tmpRth1 < AlarmTempVorst or tmpRth2 < AlarmTempVorst then
		Ft04_Vorstgevaar := True;
	end_if;
	
	if tmpRth1 >= AlarmTempVorst and tmpRth2 >= AlarmTempVorst then
		Ft04_Vorstgevaar := False;
	end_if;
	
	if flInVorstVeilig1 and BufferLading < MinBuffer and Buiten_Temp <= MinBuitenTempOpstoken Then
		ft05VorstVeiligGarage := True;
	end_if;

	if flInVorstVeilig2 and BufferLading < MinBuffer and Buiten_Temp <= MinBuitenTempOpstoken Then
		ft05VorstVeiligLoods := True;
	end_if;

	if (not flInVorstVeilig1) and blPomp1Ok and BufferLading < MinBuffer Then
		ft05BedrijfGarage := True;
	end_if;

	if (not flInVorstVeilig2) and blPomp2Ok and BufferLading < MinBuffer Then
		ft05BedrijfLoods := True;
	end_if;


	if  flInVorstVeilig1 or BufferLading > MinBuffer or Keteltemperatuur > 57 then
		 ft05BedrijfGarage := False;
	End_If;

	if  flInVorstVeilig2 or BufferLading > MinBuffer  or Keteltemperatuur > 57  then
		 ft05BedrijfLoods := False;
	End_If;
	
	if (not flInVorstVeilig1) or BufferLading > MinBuffer or Buiten_Temp >= MinBuitenTempOpstoken or Keteltemperatuur > 57 then
		 ft05VorstVeiligGarage := False;
	End_If;
	
	if (not flInVorstVeilig2) or BufferLading > MinBuffer or Buiten_Temp >= MinBuitenTempOpstoken or Keteltemperatuur > 57 then
		 ft05VorstVeiligLoods := False;
	End_If;
	

	if ft05BedrijfGarage or ft05BedrijfLoods or ft05VorstVeiligGarage or ft05VorstVeiligLoods then
		Ft05_Opstoken := True;
	else
		Ft05_Opstoken := False;
	End_If

	
	WaterDruk := (mVWaterdruk / 32767) *10;//(analoge waarde / max ad conv)*6bar --> bar
	
	if WaterDruk <= WaterDruklaag then 
		Ft08_Waterdruklaag := True;
	else
		Ft08_Waterdruklaag := False;
	End_If
	
	if WaterDruk <= WaterDrukKritiek then 
		Ft09_Waterdrukkritiek	  := True;
	else
		Ft09_Waterdrukkritiek := False;
	End_If
	
	if Kaarttemperatuur >= MaxKaarTemperatuur then 
		Ft10_MoederbordTemp := True;
	else
		Ft10_MoederbordTemp := False;
	End_If
	if not TimerEnd(stFt11) or CPUTemperature < MaxKaarTemperatuur then
		Ft11_Raspberry_piTemp := False;
	End_If
	if TimerEnd(stFt11) and CPUTemperature >= MaxKaarTemperatuur then
		TimerStart(stFt11,T#60m);
		Ft11_Raspberry_piTemp := True;
		Delay(T#120s);
	End_If
		
	if Ft01_Flow1 or Ft02_Flow2 or Ft03_H2Odruk or Ft04_Vorstgevaar or Ft05_Opstoken or
		 Ft06_WeekTestGarFaalt or Ft07_WeekTestLoodsFaalt or Ft08_Waterdruklaag or Ft09_Waterdrukkritiek
		or Ft10_MoederbordTemp or Ft11_Raspberry_piTemp or Ft12_GlobalError
		Then
			flError := True;
			flNotError :=False;
		Else
			flError := False;
			flNotError := True;
		End_If
	
	
	End_While	
End_Task

Task Bootwatcher Autorun
	While true Do
		if SecondsAfterBoot < VorigeBootCounter then
			rebootInterval10 := rebootInterval9;
			rebootInterval9 := rebootInterval8;
			rebootInterval8 := rebootInterval7;
			rebootInterval7 := rebootInterval6;
			rebootInterval6 := rebootInterval5;
			rebootInterval5 := rebootInterval4;
			rebootInterval4 := rebootInterval3;
			rebootInterval3 := rebootInterval2;
			rebootInterval2 := rebootInterval1;
			rebootInterval1 := rebootInterval0;
			rebootInterval0 := VorigeBootCounter;//(Day*1000000) + (Hours*10000) + (Minutes*100) + Seconds;
			rebootTimer := rebootInterval0;
		End_If
		VorigeBootCounter := SecondsAfterBoot;
		
		if resetBootWatchers then
			rebootInterval10 := 0;
			rebootInterval9 := 0;
			rebootInterval8 := 0;
			rebootInterval7 := 0;
			rebootInterval6 := 0;
			rebootInterval5 := 0;
			rebootInterval4 := 0;
			rebootInterval3 := 0;
			rebootInterval2 := 0;
			rebootInterval1 := 0;
			rebootInterval0 := 0;
			BootCounter := 0;
			VorigeBootCounter := 0;
			resetBootWatchers := False;
		End_If
	End_While	
End_Task

Task tRPI Autorun
	//Task raspberry pi bewaking
	PrevPiAliveValue := 0;
	While true Do
		TimerStart(stPiAlive,T#120s);
		Alive := AliveIB;
		when PrevPiAliveValue <> Alive or TimerEnd(stPiAlive) continue;
		if TimerEnd(stPiAlive) Then
			ftPiAlive := True;
		else
			ftPiAlive := False;
		End_If
		PrevPiAliveValue := Alive; 
		
	End_While	
End_Task

Task tAlive Autorun
	Task7Dalaycounter := 0;
	While true Do
		if Task7Dalaycounter >= 100 then
			PLCAlive := PLCAlive * -1;
			Task7Dalaycounter := 0;
		End_If
		DELAY (100);
		Task7Dalaycounter := Task7Dalaycounter +1;
	End_While	
End_Task


Task tCommunicatie Autorun
	While true Do
		if ctBuitenLamp then
			//Input waarden in register steken voor netcopy
			rctBuitenLamp := 1;
		Else
			rctBuitenLamp := 0;
		End_If
		
		//kopierd de inhoud van Calor 400.naar Conruigus 97
		NetCopyRegFromReg(IP#192.168.250.25,1000400,1000097,1,3,1);		
		//kopierd de inhoud van Calor 352.naar Conruigus 1000117
		NetCopyRegFromReg(IP#192.168.250.25,1000352,1000117,8,3,1);	
		//kopierd de inhoud van Munerica 1041.naar Conruigus 1001500 schemerschakelaar 0 licht, 1 donker
		NetCopyRegFromReg(IP#192.168.250.26,1001041,1001500,10,3,1);	
		DELAY (100);
		
		BufferLading := BufferLadingIB;
		BufferBoven := BufferBovenIB;
		BufferMidden := BufferMiddenIB;
		BufferOnder := BufferOnderIB;
		Keteltemperatuur := KeteltemperatuurIB;
		
	End_While	
End_Task




