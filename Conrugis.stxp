Var
// *********************In en outputs*********************************
	ctFlow1:		Bool	at %IX 100000201; //
	ctFlow2:		Bool	at %IX 100000202; //
	ctVorstVeilig1:	Bool	at %IX 100000203; //
	ctVorstVeilig2:	Bool	at %IX 100000204; //
	ctPressH2O:		Bool	at %IX 100000205; //
	ctLichtGarage:	Bool	at %IX 100000206; //
	ctLichtLoods:	Bool	at %IX 100000207; //
	ctBuitenLamp:	Bool	at %IX 100000208; //
	ctKlepGarage:	Bool	at %IX 100000209; //
	ctKlepLoods:	Bool	at %IX 100000210; //
	ctVentGarage:	Bool	at %IX 100000211; //
	ctVentLoods:	Bool	at %IX 100000212; //
	hrKlepGarage:	Bool	at %QX 100000213; //
	hrKlepLoods:	Bool	at %QX 100000214; //
	hrpLichtGarage:	Bool	at %QX 100000215; //
	hrpLichtLoods:	Bool	at %QX 100000216; //
	
	hrVent1A:		Bool	at %QX 100000301; //
	hrVent1B:		Bool	at %QX 100000302; //
	hrVent2A:		Bool	at %QX 100000303; //
	hrVent2B:		Bool	at %QX 100000304; //
	hrPomp1:		Bool	at %QX 100000305; //
	hrPomp2:		Bool	at %QX 100000306; //
	hrDakvent1:		Bool	at %QX 100000307; //
	hrDakvent2:		Bool	at %QX 100000308; //
	laBlauw1:		Bool	at %QX 100000309; //
	laBlauw2:		Bool	at %QX 100000310; //
	laRood:			Bool	at %QX 100000311; //
	laGroen:		Bool	at %QX 100000312; //
	hrBuzz:			Bool	at %QX 100000313; //
	hrpBuitenLamp:	Bool	at %QX 100000314; //
	hrpVentGarage:	Bool	at %QX 100000315; //
	hrpVentLoods:	Bool	at %QX 100000316; //

	dkLichtGarage:	Bool	at %IX 100000901; //
	dkLichtLoods:	Bool	at %IX 100000902; //
	dkLichtBuiten:	Bool	at %IX 100000903; //
	dkVentGarage:	Bool	at %IX 100000904; //
	dkVentLoods:	Bool	at %IX 100000905; //
	resI906:		Bool	at %IX 100000906; //
	resI907:		Bool	at %IX 100000907; //
	resI908:		Bool	at %IX 100000908; //
	resIO909:		Bool	at %QX 100000909; //
	resIO910:		Bool	at %QX 100000910; //
	resIO911:		Bool	at %QX 100000911; //
	resIO912:		Bool	at %QX 100000912; //
	resIO913:		Bool	at %QX 100000913; //
	resIO914:		Bool	at %QX 100000914; //
	resIO915:		Bool	at %QX 100000915; //
	resIO916:		Bool	at %QX 100000916; //
// *********************Tempratuur sensoren*********************************
// Retour temp	
	Ret_ModState:	Int		at %vl 100040000; //1 module status
	tmpRet1:		Float	at %vl 100040002; //Temp1 retour 1
	tmpRet2:		Float	at %vl 100040003; //Temp2 retour 2
	ComTmpRet1:		Int		at %vl 100041101; //Command register retour 1
	ComTmpRet2:		Int		at %vl 100041201; //Command register retour 2
	StaTtmpRet1:	Int		at %vl 100041100; //Temp retour 1
	StaTtmpRet2:	Int		at %vl 100041200; //Temp retour 2
	AvgTmpRet1:		Int		at %vl 100041106; //Temperatuur 1 meting uitmiddelen retour 1
	AvgTmpRet2:		Int		at %vl 100041206; //Temperatuur 1 meting uitmiddelen retour 2
// Ruimte temp 		
	Rth_ModState:	Int		at %vl 100050000; //1 module status
	tmpRth1:		Float	at %vl 100050002; //Temp1 ruimte 1
	tmpRth2:		Float	at %vl 100050003; //Temp2 ruimte 2
	ComTmpRth1:		Int		at %vl 100051101; //Command register ruimte 1
	ComTmpRth2:		Int		at %vl 100051201; //Command register ruimte 2
	StaTtmpRtht1:	Int		at %vl 100051100; //Temp ruimte 1
	StaTtmpRtht2:	Int		at %vl 100051200; //Temp ruimte 2
	AvgTmpRth1:		Int		at %vl 100051106; //Temperatuur 1 meting uitmiddelen ruimte 1
	AvgTmpRth2:		Int		at %vl 100051206; //Temperatuur 1 meting uitmiddelen ruimte 2
// Ruimte temp dak		
	Rthdak_ModState:Int		at %vl 100060000; //1 module status
	tmpRth1dak:		Float	at %vl 100060002; //Temp1 ruimte 1 dak
	tmpRth2dak:		Float	at %vl 100060003; //Temp2 ruimte 2 dak
	ComTmpRth1dak:	Int		at %vl 100061101; //Command register ruimte 1 dak
	ComTmpRth2dak:	Int		at %vl 100061201; //Command register ruimte 2 dak
	StaTtmpRtht1dak:Int		at %vl 100061100; //Temp ruimte 1 dak
	StaTtmpRtht2dak:Int		at %vl 100061200; //Temp ruimte 2 dak
	AvgTmpRth1dak:	Int		at %vl 100061106; //Temperatuur 1 meting uitmiddelen ruimte 1 dak
	AvgTmpRth2dak:	Int		at %vl 100061206; //Temperatuur 1 meting uitmiddelen ruimte 2 dak
// Aanvoer temp	
	Aanv_ModState:	Int		at %vl 100070000; //1 module status
	tmpAanv1:		Float	at %vl 100070002; //Temp1 Aanv 1
	tmpAanv2:		Float	at %vl 100070003; //Temp2 Aanv 2
	ComTmpAanv1:	Int		at %vl 100071101; //Command register Aanv 1
	ComTmpAanv2:	Int		at %vl 100071201; //Command register Aanv 2
	StaTtmpAanv1:	Int		at %vl 100071100; //Temp Aanv 1
	StaTtmpAanv2:	Int		at %vl 100071200; //Temp Aanv 2
	AvgTmpAanv1:	Int		at %vl 100071106; //Temperatuur 1 meting uitmiddelen Aanv 1
	AvgTmpAanv2:	Int		at %vl 100071206; //Temperatuur 1 meting uitmiddelen Aanv 2
// *********************Analoog IO*********************************
//Analoog in
	AI_Mod:			Int		at %vl 100080000; //Status AI module 
	ComSetpoint:	Int		at %vl 100080001; //Command register AI 
	mVSetpoint1:	Float	at %vl 100080002; //mV signaal Positie  1
	mVSetpoint2:	Float	at %vl 100080003; //mV signaal Positie  2
	StatSetpoint1:	Int		at %vl 100081100; //Status Ai  1
	StatSetpoint:	Int		at %vl 100081200; //Status Ai  
	AvgSetpoint1:	Int		at %vl 100081106; //gemiddelde setting register  1
	AvgSetpoint2:	Int		at %vl 100081206; //gemiddelde setting register  2
	ConfgSetpoint1:	Int		at %vl 100081107; //configuratie register
	ConfgSetpoint2:	Int		at %vl 100081207; //configuratie register 

	
//**********************Programma variabelen en registers******************************

// Flags
	flVent1A:				Bool	at %MX 1;	//
	flVent1B:				Bool	at %MX 2;	//
	flVent2A:				Bool	at %MX 3;	//
	flVent2B:				Bool	at %MX 4;	//
	flPomp1:				Bool	at %MX 5;	//
	flPomp2:				Bool	at %MX 6;	//
	flDakvent1:				Bool	at %MX 7;	//
	flDakvent2:				Bool	at %MX 8;	//
	flBlauw1:				Bool	at %MX 9;	//
	flBlauw2:				Bool	at %MX 10;	//
	flRood:					Bool	at %MX 11;	//
	flGroen:				Bool	at %MX 12;	//
	flOpstoken:				Bool	at %MX 13;	//
	flExtractor:			Bool	at %MX 14;	//
	flAlm1_85V:				Bool	at %MX 15;	//
	flAlm2_52V:				Bool	at %MX 16;	//
	flAlm3_37V:				Bool	at %MX 17;	//
	flAlm4_29V:				Bool	at %MX 18;	//
	flSetClock:				Bool	at %MX 19;	//
	flInVorstVeilig1:		Bool	at %MX 20;	//
	flInVorstVeilig2:		Bool	at %MX 21;	//
	flForceDakVent1:		Bool	at %MX 22;	//
	flForceDakVent2:		Bool	at %MX 23;	//
	flForceDakVent1Off:		Bool	at %MX 24;	//
	flForceDakVent2Off:		Bool	at %MX 25;	//	
	flForceVent1Off:		Bool	at %MX 26;	//
	flForceVent2Off:		Bool	at %MX 27;	//	
	flForceVent1:			Bool	at %MX 28;	//
	flForceVent2:			Bool	at %MX 29;	//	
	flMute:					Bool	at %MX 30;	//	
	flpVentGarage:			Bool	at %MX 31;	//	
	flpVentLoods:			Bool	at %MX 32;	//	
	flpLichtGarage:			Bool	at %MX 33;	//	
	flpLichtLoods:			Bool	at %MX 34;	//	
	flpBuitenLamp:			Bool	at %MX 35;	//	
	flAck:					Bool	at %MX 36;	//
	flpAllesUit:			Bool	at %MX 37;	//
	flpTestBuzz:			Bool	at %MX 38;	//
		
//**********************Fouten*******************************************
	Ft01_Flow1:				Bool	at %MX 100; //Geen flow in garage
	Ft02_Flow2:				Bool	at %MX 102; //geen flow in loods
	Ft03_H2Odruk:			Bool	at %MX 103; //waterdruk weggevallen
	Ft04_Vorstgevaar:		Bool	at %MX 104; //temperatuur te laag in de ruimte
	Ft05_Opstoken:			Bool	at %MX 105; //Opstoken nodig

//Booleans
	bInAuto:				Bool;
	blTimeOutPmp1Act:		Bool;
	blTimeOutPmp2Act:		Bool;
	blPomp1Ok:				Bool;
	blPomp2Ok:				Bool;
	KnipperBit:				Bool;
	blBuzz:					Bool;
	blForceBuzz:			Bool;
	blTimerExtrGarLoopt:	Bool;
	blTimerExtrLoodsLoopt:	Bool;
	blTest:					Bool;
	
//Register numbers: 1000000 ... 1001999
//Registers
	regTimeOutPomp:			Int		at %rl 1000000; //Time out geen flow als pomp draait
	AlarmTempVorst:			Int		at %rl 1000001; //Ruimte temp lager dan alarm
	MinTempAanVBedrijf:		Int		at %rl 1000002; //Temp aanvoer in bedrijf lager dan alarm opstoken
	MinTempAanVVorstVlg:	Int		at %rl 1000003; //Temp aanvoer in vorstveilig lager dan alarm opstoken
	BaseSetpointBedrijf:	Int		at %rl 1000004; //Setpoint met thermostaat in de middenstand
	SetpointVorstVeilig:	Int		at %rl 1000005; //Setpoint in vorstveilig
	regHours:				Int		at %rl 1000006; //Automatische synchronisatie met pannel op dit tijdstip (uren)
	regMinutes:				Int		at %rl 1000007; //Automatische synchronisatie met pannel op dit tijdstip (min)
	regSeconds:				Int		at %rl 1000008; //Automatische synchronisatie met pannel op dit tijdstip (sec)
	res9:					Int		at %rl 1000009; //
	res10:					Int		at %rl 1000010; //
	HysteresischBedrijf:	Int		at %rl 1000011; //Hysteresisch ruimte temp tijdens bedrijf waarde = span 50/50 verdeeld
	HysteresischVorstV:		Int		at %rl 1000012; //Hysteresisch ruimte temp tijdens vorstveilig waarde = span 50/50 verdeeld
	HysteresischDak:		Int		at %rl 1000013; //Hysteresisch temp onder dak aan uitschaklen dakventiatoren waarde = span 50/50 verdeeld
	MinTempAanvoer1:		Int		at %rl 1000014; //Aanvoer hoger dan deze temp dan schakelen ventilaoren heater in Garage
	MinTempAanvoer2:		Int		at %rl 1000015; //Aanvoer hoger dan deze temp dan schakelen ventilaoren heater in Loods
	HysteresischAanv:		Int		at %rl 1000016; //Hysteresisch voor in en uit schakelen heater ventilatoren waarde = span 50/50 verdeeld
	dTVentBijschakelen:		Int		at %rl 1000017; //Als er meer verschil is dan dTVentBijschakelen tussen het vorstveilig setpunt en de ruimte temp waord de tweede vent bij in geschakeld
	setpointDakVent:		Int		at %rl 1000018; //Als de temperatuur onder het dak hoger is dan setpointDakVent	schakeld de dakventilator in
	TijdVorstVeiligUit:		Int		at %rl 1000019; //Schakeld 's morgens de vorstbeileging uit en gaat naar bedrijf.
	TijdVorstVeiligAan:		Int		at %rl 1000020; //Schakeld 's avonds de vorstbeileging in
	LoopTijdEXtractor:		Int		at %rl 1000021; // 
	StatusVent1A:			Int		at %rl 1000022; //
	StatusVent1B:			Int		at %rl 1000023; //
	StatusVent2A:			Int		at %rl 1000024; //
	StatusVent2B:			Int		at %rl 1000025; //
	StatusVentDak1:			Int		at %rl 1000026; //
	StatusVentDak2:			Int		at %rl 1000027; //
	StatusErr:				Int		at %rl 1000028; //
	WensTemp1:				Int		at %rl 1000029; //
	WensTemp2:				Int		at %rl 1000030; //
	StatusTimpuls:			Int		at %rl 1000031; //
	swKlepGarage:			Int		at %rl 1000032; //
	swKlepLoods:			Int		at %rl 1000033; //
	telExtractorGarage:		Int		at %rl 1000034; //
	telExtractorLoods:		Int		at %rl 1000035; //
	
//Integers
//Floats
	SetpointBedrijf1:		Float	at %rl 1000050; //
	SetpointBedrijf2:		Float	at %rl 1000055; //
//**********************RTC**********************************************
	Milliseconds:			Int		at %vl 102910; //
	Seconds:				Int		at %vl 102911; //
	Minutes:				Int		at %vl 102912; //
	Hours:					Int		at %vl 102913; //
	Weekday:				Int		at %vl 102914; //Weekday (0 = Sunday)
	Day:					Int		at %vl 102915; //
	Month:					Int		at %vl 102916; //
	Year:					Int		at %vl 102917; //
	


//**********************Timers********************************************
	stTimeOutPomp1:			Timer;
	stTimeOutPomp2:			Timer;
	stExtractorGarage:		Timer;
	stExtractorLoods:		Timer;
End_var

Task tMain Autorun
//Init flags
	FlagClear(0,100); //Clear eerste 100 flags
//Init outputs en flags
	hrVent1A := False;
	hrVent1B := False;
	hrVent2A := False;		
	hrVent2B := False;		
	hrPomp1 := False;		
	hrPomp2 := False;	
	hrDakvent1 := False;
	hrDakvent2 := False;
	laBlauw1 := False;
	laBlauw2 := False;
	laRood := False;
	laGroen := False;
	hrBuzz :=  False;
	StatusTimpuls :=0;
	flAck := False;
	flpAllesUit := False;
	flpBuitenLamp := False;
	flpLichtGarage := False;
	flpLichtLoods := False;
	flpVentGarage := False;
	flpVentLoods := False;
	hrpBuitenLamp := False;
	hrpLichtGarage := False;
	hrpLichtLoods := False;
	hrpVentGarage := False;
	hrpVentLoods := False;
	blForceBuzz := False;
	blBuzz :=False;
	swKlepGarage := 2;
	swKlepLoods := 2;
	hrKlepGarage := False;
	hrKlepLoods := False;	
	blTest := False;
	
//Start temp meting Retour
	ComTmpRet1 := 104; //4 draads
	ComTmpRet1 := 107; //Celsius
	ComTmpRet1 := 109; //PT100
	ComTmpRet1 := 160; //Display temperature in module register
	ComTmpRet2 := 104; //4 draads
	ComTmpRet2 := 107; //Celsius
	ComTmpRet2 := 109; //PT100
	ComTmpRet2 := 160; //Display temperature in module register

//Start temp meting Ruimte temp
	ComTmpRth1 := 104; //4 draads
	ComTmpRth1 := 107; //Celsius
	ComTmpRth1 := 109; //PT100
	ComTmpRth1 := 160; //Display temperature in module register
	ComTmpRth2 := 104; //4 draads
	ComTmpRth2 := 107; //Celsius
	ComTmpRth2 := 109; //PT100
	ComTmpRth2 := 160; //Display temperature in module register

//Start temp meting Ruimte temp dak
	ComTmpRth1dak := 104; //4 draads
	ComTmpRth1dak := 107; //Celsius
	ComTmpRth1dak := 109; //PT100
	ComTmpRth1dak := 160; //Display temperature in module register
	ComTmpRth2dak := 104; //4 draads
	ComTmpRth2dak := 107; //Celsius
	ComTmpRth2dak := 109; //PT100
	ComTmpRth2dak := 160; //Display temperature in module register

//Start temp meting Aanvoer
	ComTmpAanv1 := 104; //4 draads
	ComTmpAanv1 := 107; //Celsius
	ComTmpAanv1 := 109; //PT100
	ComTmpAanv1 := 160; //Display temperature in module register
	ComTmpAanv2 := 104; //4 draads
	ComTmpAanv2 := 107; //Celsius
	ComTmpAanv2 := 109; //PT100
	ComTmpAanv2 := 160; //Display temperature in module register

//Set uitmideling temperatuur meting	
	AvgTmpRet1 := 16; //uitmiddelen  laatste 16
	AvgTmpRet2 :=16; //uitmiddelen  laatste 16
	AvgTmpRth1 := 16; //uitmiddelen  laatste 16
	AvgTmpRth2 := 16; //uitmiddelen  laatste 16
	AvgTmpRth1dak := 16; //uitmiddelen  laatste 16
	AvgTmpRth2dak := 16; //uitmiddelen  laatste 16
	AvgSetpoint1 := 50; //uitmiddelen  laatste 16
	AvgSetpoint2 := 50; //uitmiddelen  laatste 16

//Config AI
	ConfgSetpoint1 := 5; //0-10V
	AvgSetpoint1 := 16; //uitmiddelen  laatste 16
	ConfgSetpoint1 := 5; //0-10V
	AvgSetpoint1 := 16; //uitmiddelen  laatste 16

//Reset fouten
	Ft01_Flow1 := False;
	Ft02_Flow2 := False;
	Ft03_H2Odruk := False;
	Ft04_Vorstgevaar := False;
	Ft05_Opstoken := False;

//**************************************Start Main loop**************************************
	bInAuto := True;
	While bInAuto Do
		if not ctVorstVeilig1 and Hours > TijdVorstVeiligUit and Hours < TijdVorstVeiligAan then
			flInVorstVeilig1 := False;
			//Setpoint uitrekenen
			WensTemp1 := -5 + (mVSetpoint1*10/32767);
			SetpointBedrijf1 := BaseSetpointBedrijf + WensTemp1;
			
			//Garage
			If tmpRth1 < SetpointBedrijf1 - (HysteresischBedrijf/2) then
				flPomp1 := True;
			End_If;
			If tmpRth1 >= SetpointBedrijf1 + (HysteresischBedrijf/2) then
				flPomp1 := False;
			End_If;
			if tmpRet1 >= MinTempAanvoer1 + (HysteresischAanv/2) or flForceVent1 then
				flVent1A := True;
				flVent1B := True;
			End_If;
			if tmpRet1 < MinTempAanvoer1 - (HysteresischAanv/2) and not flForceVent1  then
				flVent1A := False;
				flVent1B := False;
			End_If;
			flBlauw1 := False;
		
		Else
			flInVorstVeilig1 := True;
			SetpointBedrijf1 :=SetpointVorstVeilig;
			//Garage
			If tmpRth1 < SetpointVorstVeilig - (HysteresischVorstV/2) then
				flPomp1 := True;
			End_If;
			If tmpRth1 >= SetpointVorstVeilig - (HysteresischVorstV/2) then
				flPomp1 := False;
			End_If;
			if flPomp1 or flForceVent1 then
				flVent1A := True;
			Else
				flVent1A := False;
			End_If;
			if flVent1A and tmpRet1 < SetpointVorstVeilig - dTVentBijschakelen or flForceVent1 then
				flVent1B := True;
			else
				flVent1B := False;
			End_If;
			flBlauw1 := True;
			
		End_If;

		if not ctVorstVeilig2 and Hours > TijdVorstVeiligUit and Hours < TijdVorstVeiligAan then
			flInVorstVeilig2 := False;
			//Setpoint uitrekenen
			WensTemp2 := 5 + (mVSetpoint2*-10/32767);
			SetpointBedrijf2 := BaseSetpointBedrijf + WensTemp2;
			//Loods
			If tmpRth2 < SetpointBedrijf2 - (HysteresischBedrijf/2) then
				flPomp2 := True;
			End_If;
			If tmpRth2 >= SetpointBedrijf2 + (HysteresischBedrijf/2) then
				flPomp2 := False;
			End_If;
			if tmpRet2 >= MinTempAanvoer2 + (HysteresischAanv/2) or flForceVent2 then
				flVent2A := True;
				flVent2B := True;
			End_If;
			if tmpRet2 < MinTempAanvoer2 - (HysteresischAanv/2) and not flForceVent2 then
				flVent2A := False;
				flVent2B := False;
			End_If;
			flBlauw2 := False;	
		Else
			flInVorstVeilig2 := True;
			SetpointBedrijf2 :=SetpointVorstVeilig;
			//Loods
			If tmpRth2 < SetpointVorstVeilig - (HysteresischVorstV/2) or flForceVent2 then
				flPomp2 := True;
			End_If;
			If tmpRth2 >= SetpointVorstVeilig - (HysteresischVorstV/2) and not flForceVent2 then
				flPomp2 := False;
			End_If;
			if flPomp2 or flForceVent2 then
				flVent2A := True;
			Else
				flVent2A := False;
			End_If;
			if flVent2A and tmpRet2 < SetpointVorstVeilig - dTVentBijschakelen or flForceVent2 then
				flVent2B := True;
			else
				flVent2B := False;
			End_If;
			flBlauw2 := True;
		End_If;

//dakvent Garage
		if (tmpRth1dak > setpointDakVent + (HysteresischDak/2)) or flForceDakVent1 then
			flDakvent1 := True;
		End_if;
		if (tmpRth1dak <= setpointDakVent - (HysteresischDak/2)) and not flForceDakVent1 then
			flDakvent1 := False;
		End_if;
		
//Dakvent loods
		if (tmpRth2dak > setpointDakVent + (HysteresischDak/2)) or flForceDakVent2 then
			flDakvent2 := True;
		End_if;
		if (tmpRth2dak <= setpointDakVent - (HysteresischDak/2)) and not flForceDakVent2 then
			flDakvent2 := False;
		End_if;
		
// set clock
		if flSetClock then
			Hours := regHours;
			Minutes := regMinutes;
			Seconds := regSeconds;
			flSetClock := False;
		End_if;

// Flow bevestigd	
		if hrPomp1 and not Ft01_Flow1 then
			blPomp1Ok := True;
		else
			blPomp1Ok := False;
		End_If;

		if hrPomp2 and not Ft02_Flow2 then
			blPomp2Ok := True;
		else
			blPomp2Ok := False;
		End_If;

//Opstoken
		if Ft05_Opstoken then
			flOpstoken := true;
		else
			flOpstoken := false;
		End_If;

// Alm visualisatie en sonorisatie
		if Ft01_Flow1 or Ft02_Flow2 or Ft03_H2Odruk or Ft04_Vorstgevaar or (Ft05_Opstoken and KnipperBit) then
			flRood := True;
		else
			flRood := False;
		End_if;
		
		if Ft01_Flow1 or Ft02_Flow2 or Ft03_H2Odruk or Ft04_Vorstgevaar or Ft05_Opstoken then
			flGroen := False;
		else
			flGroen := True;
		End_if;
		
		if blForceBuzz or ((Ft01_Flow1 or Ft02_Flow2 or Ft03_H2Odruk or Ft04_Vorstgevaar ) and not flMute  and not flAck) then
			blBuzz := True;
		Else
			blBuzz := False;
		End_If;
		
		if not Ft01_Flow1 and not Ft02_Flow2 and not Ft03_H2Odruk and not Ft04_Vorstgevaar then
			flAck := False;
		End_If
		
		if not Ft01_Flow1 and not Ft02_Flow2 and not Ft03_H2Odruk and not Ft04_Vorstgevaar and not Ft05_Opstoken then
			StatusErr :=0;
		End_If
		
		if Ft01_Flow1 then
			StatusErr :=1;
		End_If

		if Ft02_Flow2 then
			StatusErr :=2;
		End_If		
		
		if Ft03_H2Odruk then
			StatusErr :=3;
		End_If
		
		if Ft04_Vorstgevaar then
			StatusErr :=4;
		End_If
		
		if Ft05_Opstoken then
			StatusErr :=5;
		End_If
		
//Dakventilatoren
		if StatusVentDak1 == 1 then
			flForceDakVent1Off := False;
			flForceDakVent1 := False;
		End_if;			
		if StatusVentDak1 == 2 then
			flForceDakVent1Off := True;
			flForceDakVent1 := False;
		End_if;			
		if StatusVentDak1 == 3 then
			flForceDakVent1Off := False;
			flForceDakVent1 := True;
		End_if;			
		
		if StatusVentDak2 == 1 then
			flForceDakVent2Off := False;
			flForceDakVent2 := False;
		End_if;			
		if StatusVentDak2 == 2 then
			flForceDakVent2Off := True;
			flForceDakVent2 := False;
		End_if;			
		if StatusVentDak2 == 3 then
			flForceDakVent2Off := False;
			flForceDakVent2 := True;
		End_if;		
		
//ruimte ventilatoren
		if StatusVent1A == 2 then
			flForceVent1Off := True;
			flForceVent1 := False;
		End_if;			
		if StatusVent1A == 1 then
			flForceVent1Off := False;
			flForceVent1 := False;
		End_if;			
		if StatusVent1A == 3 then
			flForceVent1Off := False;
			flForceVent1 := True;
		End_if;		
		
		if StatusVent2A == 2 then
			flForceVent2Off := True;
			flForceVent2 := False;
		End_if;			
		if StatusVent2A == 1 then
			flForceVent2Off := False;
			flForceVent2 := False;
		End_if;			
		if StatusVent2A == 3 then
			flForceVent2Off := False;
			flForceVent2 := True;
		End_if;		
	
	End_While;
End_Task

Task tVeiligheden Autorun
//*************************************tVeiligheden en outputs****************************************
	While True Do
//Knipperbit
	if Seconds mod 2 == 0 then
		KnipperBit := True;
	else
		KnipperBit := False;
	End_if;
// DO sturen op 1 locatie
		
		if flBlauw1 then
			laBlauw1 := True;
		else
			laBlauw1 := False;
		end_if;
		
		if flBlauw2 then
			laBlauw2 := True;
		else
			laBlauw2 := False;
		end_if;
		
		if flGroen then
			laGroen := True;
		else
			laGroen := False;
		end_if;
		
		if flRood then
			laRood := True;
		else
			laRood := False;
		end_if;
		
		if flDakvent1 And not flForceDakVent1Off then
			hrDakvent1 := True;
		else
			hrDakvent1 := False;
		end_if;
		
		if flDakvent2 And not flForceDakVent2Off then
			hrDakvent2 := True;
		else
			hrDakvent2 := False;
		end_if;
		
		if flVent1A and not flForceVent1Off then
			hrVent1A := True;
		else
			hrVent1A := False;
		end_if;
		
		if flVent1B  and not flForceVent1Off then
			hrVent1B := True;
		else
			hrVent1B := False;
		end_if;
		
		if flVent2A and not flForceVent2Off then
			hrVent2A := True;
		else
			hrVent2A := False;
		end_if;
		
		if flVent2B and  not flForceVent2Off then
			hrVent2B := True;
		else
			hrVent2B := False;
		end_if;
		
		if ctKlepGarage then
			hrPomp1 := True;
		else
			hrPomp1 := False;
		End_If
		
		if ctKlepLoods then
			hrPomp2 := True;
		else
			hrPomp2 := False;
		End_If
		
		if (flPomp1 or Ft04_Vorstgevaar or swKlepGarage == 3) and not (swKlepGarage == 1) then
			hrKlepGarage := True;
		else
			hrKlepGarage := False;
		end_if;
		
		if (flPomp2 or Ft04_Vorstgevaar or swKlepLoods == 3) and not (swKlepLoods == 1) then
			hrKlepLoods := True;
		else
			hrKlepLoods := False;
		end_if;
		
		if blBuzz then
			hrBuzz := True;
		else
			hrBuzz := False;
		end_if;
		
		
	End_While	
End_Task

Task tPulsRelais Autorun
//*************************************PulsRelais****************************************
	While True Do
		//puls vent loods
		if flpVentLoods then
			StatusTimpuls := 1;
			hrpVentLoods := true;
			Delay(T#500ms);
			flpVentLoods := False;	
			hrpVentLoods := False;
			StatusTimpuls := 0;
		End_if
		//puls vent garage
		if flpVentGarage then
			StatusTimpuls := 2;
			hrpVentGarage := true;
			Delay(T#500ms);
			flpVentGarage := False;	
			hrpVentGarage := False;
			StatusTimpuls := 0;
		End_if
		//puls buitenlamp
		if flpBuitenLamp then
			StatusTimpuls := 3;
			hrpBuitenLamp := true;
			Delay(T#500ms);
			flpBuitenLamp := False;	
			hrpBuitenLamp := False;
			StatusTimpuls := 0;
		End_if
		//puls licht garage
		if flpLichtGarage then
			StatusTimpuls := 4;
			hrpLichtGarage := true;
			Delay(T#500ms);
			flpLichtGarage := False;	
			hrpLichtGarage := False;
			StatusTimpuls := 0;
		End_if
		//puls licht loods
		if flpLichtLoods then
			StatusTimpuls := 5;
			hrpLichtLoods := true;
			Delay(T#500ms);
			flpLichtLoods := False;
			hrpLichtLoods := False;
			StatusTimpuls := 0;
			
		End_if
		//puls alles uit
		if flpAllesUit then
			StatusTimpuls := 6;
			blForceBuzz := true;
			Delay(T#250ms);
			blForceBuzz := False;
			Delay(T#250ms);
			blForceBuzz := true;
			Delay(T#250ms);
			blForceBuzz := False;
			if ctLichtGarage then
				hrpLichtGarage := True;
			End_If
			if ctLichtLoods then
				hrpLichtLoods := True;
			End_If
			if ctBuitenLamp then
				hrpBuitenLamp := True;
			End_If
			if ctVentGarage then
				hrpVentGarage := True;
			End_If
			if ctVentLoods then
				hrpVentLoods := True;
			End_If
			Delay(T#250ms);
			hrpLichtGarage := False;
			hrpLichtLoods := False;
			hrpBuitenLamp := False;
			hrpVentGarage := False;
			hrpVentLoods := False;
			flpAllesUit := False;
			StatusTimpuls := 0;			
		End_if
		//alle dk in? ==> start tijd
		if dkLichtBuiten or dkLichtGarage or dkLichtLoods or dkVentGarage or dkVentLoods then
			StatusTimpuls := 7;
			Delay(T#1500ms);
		End_If
		//na 1.5sec nog steeds in? ==> beep beep ==> alles uit
		if (dkLichtBuiten or dkLichtGarage or dkLichtLoods or dkVentGarage or dkVentLoods) and StatusTimpuls == 7 then
			StatusTimpuls := 8;
			blBuzz := true;
			Delay(T#210ms);
			blBuzz := False;
			flpAllesUit := True;
			StatusTimpuls := 0;
		else
			StatusTimpuls := 0;
		End_if
		
		// test beep
		if flpTestBuzz then
			blForceBuzz := true;
			Delay(T#250ms);
			blForceBuzz := False;
			Delay(T#250ms);
			blForceBuzz := true;
			Delay(T#250ms);
			blForceBuzz := False;
			flpTestBuzz := False;
		End_If	
		
		// na 1 sec elke sec langer dk in is 15 min extractor tijd garage
		if dkVentGarage and ctVentGarage then
			Delay(T#1s);
			telExtractorGarage := 1;
			blForceBuzz := true;
			Delay(T#250ms);
			blForceBuzz := False;
			Delay(T#1s);
			while dkVentGarage and ctVentGarage do
				telExtractorGarage := telExtractorGarage + 1;
				blForceBuzz := true;
				Delay(T#250ms);
				blForceBuzz := False;
				Delay(T#1s);
			End_While
		End_If
		// extractor uit = 15 min teller op 0
		if not ctVentGarage then
			telExtractorGarage := 0;
		End_If
		
		//start 15 min timer
		if not blTimerExtrGarLoopt and telExtractorGarage > 0 then
			blTimerExtrGarLoopt := True;
			TimerStart(stExtractorGarage, T#15m);
		End_If
		
		//timer end 15 min bij laatste itteratie stop extractor
		if TimerEnd(stExtractorGarage) and blTimerExtrGarLoopt then
			telExtractorGarage := telExtractorGarage - 1;
			blTimerExtrGarLoopt := False;
			if (telExtractorGarage < 1) and ctVentGarage then
				flpVentGarage := True;
			End_If
		End_If
		
		// na 1 sec elke sec langer dk in is 15 min extractor tijd loods
		if dkVentLoods and ctVentLoods then
			Delay(T#1s);
			telExtractorLoods := 1;
			blForceBuzz := true;
			Delay(T#250ms);
			blForceBuzz := False;
			Delay(T#1s);
			while dkVentLoods and ctVentLoods do
				telExtractorLoods := telExtractorLoods + 1;
				blForceBuzz := true;
				Delay(T#250ms);
				blForceBuzz := False;
				Delay(T#1s);
			End_While
		End_If
		// extractor uit = 15 min teller op 0
		if not ctVentLoods then
			telExtractorLoods := 0;
		End_If
		//start 15 min timer
		if not blTimerExtrLoodsLoopt and telExtractorLoods > 0 then
			blTimerExtrLoodsLoopt := True;
			TimerStart(stExtractorLoods, T#15m);
		End_If
		//timer end 15 min bij laatste itteratie stop extractor
		if TimerEnd(stExtractorLoods) and blTimerExtrLoodsLoopt then
			telExtractorLoods := telExtractorLoods - 1;
			blTimerExtrLoodsLoopt := False;
			if (telExtractorLoods < 1) and ctVentLoods then
				flpVentLoods := True;
			End_If
		End_If
		
	End_While	
End_Task

Task tError Autorun
//*************************************tError****************************************
	While True Do
	if hrPomp1 and not blTimeOutPmp1Act then
		TimerStart(stTimeOutPomp1,T#30s);
		blTimeOutPmp1Act := True;
	End_If;
	if TimerEnd(stTimeOutPomp1) and not ctFlow1 then
		//Ft01_Flow1 := True;
	End_If;
	if not hrPomp1 then
		blTimeOutPmp1Act := False;
		Ft01_Flow1 := False;
	End_If;
	
	if hrPomp2 and not blTimeOutPmp2Act then
		TimerStart(stTimeOutPomp2,T#30s);
		blTimeOutPmp2Act := True;
	End_If;
	if TimerEnd(stTimeOutPomp2) and not ctFlow2 then
		//Ft02_Flow2 := True;
	End_If;
	if not hrPomp2 then
		blTimeOutPmp2Act := False;
		Ft02_Flow2 := False;
	End_If;
	
	if not ctPressH2O then
		Ft03_H2Odruk := True;
	Else
		Ft03_H2Odruk := False;
	End_If;
	
	if tmpRth1 < AlarmTempVorst or tmpRth2 < AlarmTempVorst then
		Ft04_Vorstgevaar := True;
	end_if;
	
	if tmpRth1 >= AlarmTempVorst and tmpRth2 >= AlarmTempVorst then
		Ft04_Vorstgevaar := False;
	end_if;
	
	if tmpAanv1 < MinTempAanVBedrijf and blPomp1Ok and not flInVorstVeilig1 then
		Ft05_Opstoken := True;
	end_if;
	if tmpAanv2 < MinTempAanVBedrijf and blPomp2Ok and not flInVorstVeilig2 then
		Ft05_Opstoken := True;
	end_if;
	if tmpAanv1 < MinTempAanVVorstVlg and blPomp1Ok and flInVorstVeilig1 then
		Ft05_Opstoken := True;
	end_if;
	if tmpAanv2 < MinTempAanVVorstVlg and blPomp2Ok and flInVorstVeilig2 then
		Ft05_Opstoken := True;
	end_if;
	if tmpAanv1 >= MinTempAanVBedrijf or tmpAanv1 >= MinTempAanVBedrijf then
		 Ft05_Opstoken := False;
	End_If;
		
	End_While	
End_Task
